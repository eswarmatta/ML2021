{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled5.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/eswarmatta/ML2021/blob/main/Parkinson_Project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "djJMIbwGfSYC"
      },
      "source": [
        "# **PARKINSON'S PROJECT**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gi1Vso7nfVO3"
      },
      "source": [
        "# Objective:About parkinson's project using python and machine learning. \n",
        "We build a project using machine learning by downloading dataset(i.e par.csv) from kaggle."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jIyWBGTufXpo"
      },
      "source": [
        "IMPORTING LIBRARIES"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jCF2KTsXfaUV"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "sns.set_style('whitegrid')\n",
        "from pandas import Series,DataFrame\n",
        "import random\n",
        "from sklearn import linear_model\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import learning_curve, validation_curve\n",
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import make_scorer, accuracy_score\n",
        "from sklearn.metrics import roc_curve, roc_auc_score ,auc, plot_roc_curve\n",
        "from sklearn import svm\n",
        "import sklearn.metrics\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.model_selection import cross_validate\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.datasets import load_digits\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.metrics import accuracy_score"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2xZXC-3YemA0"
      },
      "source": [
        "**EDA**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S-U-vgHjfrmu"
      },
      "source": [
        "READ THE DATASET"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "pGOpCuwyftua",
        "outputId": "2944c3bb-0d2e-4287-8055-39d95659596d"
      },
      "source": [
        "par=pd.read_csv('par.csv')\n",
        "par.head(8)"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>gender</th>\n",
              "      <th>RPDE</th>\n",
              "      <th>numPulses</th>\n",
              "      <th>numPeriodsPulses</th>\n",
              "      <th>meanPeriodPulses</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.57227</td>\n",
              "      <td>240</td>\n",
              "      <td>239</td>\n",
              "      <td>0.008064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.53966</td>\n",
              "      <td>234</td>\n",
              "      <td>233</td>\n",
              "      <td>0.008258</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.58982</td>\n",
              "      <td>232</td>\n",
              "      <td>231</td>\n",
              "      <td>0.008340</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.59257</td>\n",
              "      <td>178</td>\n",
              "      <td>177</td>\n",
              "      <td>0.010858</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.53028</td>\n",
              "      <td>236</td>\n",
              "      <td>235</td>\n",
              "      <td>0.008162</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.65451</td>\n",
              "      <td>226</td>\n",
              "      <td>221</td>\n",
              "      <td>0.007631</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0.54543</td>\n",
              "      <td>322</td>\n",
              "      <td>321</td>\n",
              "      <td>0.005991</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0.51179</td>\n",
              "      <td>318</td>\n",
              "      <td>317</td>\n",
              "      <td>0.006074</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   id  gender     RPDE  numPulses  numPeriodsPulses  meanPeriodPulses\n",
              "0   0       1  0.57227        240               239          0.008064\n",
              "1   0       1  0.53966        234               233          0.008258\n",
              "2   0       1  0.58982        232               231          0.008340\n",
              "3   1       0  0.59257        178               177          0.010858\n",
              "4   1       0  0.53028        236               235          0.008162\n",
              "5   1       0  0.65451        226               221          0.007631\n",
              "6   2       1  0.54543        322               321          0.005991\n",
              "7   2       1  0.51179        318               317          0.006074"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "J-4YPok8gDPw",
        "outputId": "81c8cc94-becc-48b5-d85a-c796b5ee4c9e"
      },
      "source": [
        "par.isnull()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>gender</th>\n",
              "      <th>RPDE</th>\n",
              "      <th>numPulses</th>\n",
              "      <th>numPeriodsPulses</th>\n",
              "      <th>meanPeriodPulses</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>194</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>198</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>199 rows × 6 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "        id  gender   RPDE  numPulses  numPeriodsPulses  meanPeriodPulses\n",
              "0    False   False  False      False             False             False\n",
              "1    False   False  False      False             False             False\n",
              "2    False   False  False      False             False             False\n",
              "3    False   False  False      False             False             False\n",
              "4    False   False  False      False             False             False\n",
              "..     ...     ...    ...        ...               ...               ...\n",
              "194  False   False  False      False             False             False\n",
              "195  False   False  False      False             False             False\n",
              "196  False   False  False      False             False             False\n",
              "197  False   False  False      False             False             False\n",
              "198  False   False  False      False             False             False\n",
              "\n",
              "[199 rows x 6 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xHMhlG37gN8J"
      },
      "source": [
        "LINE PLOT"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "uLeic2pAgP_o",
        "outputId": "b168303e-08bd-435e-f7c5-eeb2484997ff"
      },
      "source": [
        "sns.lineplot(data=par,x=\"id\",y=\"numPulses\")\n",
        "plt.show()"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LhavHTYtgoP0"
      },
      "source": [
        "HEAT MAP"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 367
        },
        "id": "CoqK_pnZgp-d",
        "outputId": "8640c7f1-d483-4913-eea2-ba328def2168"
      },
      "source": [
        "sns.heatmap(par.isnull())"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb590068910>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0akAOBM9pTbT"
      },
      "source": [
        "BOX PLOT"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 514
        },
        "id": "rQa2aBoihENv",
        "outputId": "8e915df0-0443-4bb1-ff44-8bf770d7821b"
      },
      "source": [
        "plt.figure(figsize=(10,8))\n",
        "sns.boxplot(x='id',y='numPulses',data=par,palette='Dark2_r')"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb58735aa90>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7C_oN1FVhS_I"
      },
      "source": [
        "BAR PLOT"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "y6OtSUaahUpe",
        "outputId": "14fa71f6-ca74-422d-aa09-d284ff270aa1"
      },
      "source": [
        "sns.barplot(data=par,x='id',y='numPulses')"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb586d2e950>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yic-xfbRhs8W"
      },
      "source": [
        "SCATTER PLOT"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 405
        },
        "id": "l2p3wRT4hukr",
        "outputId": "6e7ab2df-dc23-457c-823e-3dce3f235844"
      },
      "source": [
        "plt.figure(figsize=(6,6))\n",
        "sns.scatterplot(x='id',y='numPulses',data=par,palette='Dark2_r')"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb5870a4210>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1Md8sMIth4HN"
      },
      "source": [
        "CLEANING DATASET"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EkRKfyEbkonk"
      },
      "source": [
        "par.drop('numPeriodsPulses',axis=1,inplace=True)"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "7vjSXXx0t1uX",
        "outputId": "158c9b13-1c57-4c97-cd8d-df196fac361c"
      },
      "source": [
        "mall.head(50)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>number</th>\n",
              "      <th>Age</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>19</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>21</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>20</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>23</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>31</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>22</td>\n",
              "      <td>76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>35</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>23</td>\n",
              "      <td>94</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>64</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>30</td>\n",
              "      <td>72</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>11</td>\n",
              "      <td>67</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>12</td>\n",
              "      <td>35</td>\n",
              "      <td>99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>13</td>\n",
              "      <td>58</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>14</td>\n",
              "      <td>24</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>15</td>\n",
              "      <td>37</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>16</td>\n",
              "      <td>22</td>\n",
              "      <td>79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>17</td>\n",
              "      <td>35</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>18</td>\n",
              "      <td>20</td>\n",
              "      <td>66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>19</td>\n",
              "      <td>52</td>\n",
              "      <td>29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>20</td>\n",
              "      <td>35</td>\n",
              "      <td>98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>21</td>\n",
              "      <td>35</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>22</td>\n",
              "      <td>25</td>\n",
              "      <td>73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>23</td>\n",
              "      <td>46</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>24</td>\n",
              "      <td>31</td>\n",
              "      <td>73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>25</td>\n",
              "      <td>54</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>26</td>\n",
              "      <td>29</td>\n",
              "      <td>82</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>27</td>\n",
              "      <td>45</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>28</td>\n",
              "      <td>35</td>\n",
              "      <td>61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>29</td>\n",
              "      <td>40</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>30</td>\n",
              "      <td>23</td>\n",
              "      <td>87</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>31</td>\n",
              "      <td>60</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>32</td>\n",
              "      <td>21</td>\n",
              "      <td>73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>33</td>\n",
              "      <td>53</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>34</td>\n",
              "      <td>18</td>\n",
              "      <td>92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>35</td>\n",
              "      <td>49</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>36</td>\n",
              "      <td>21</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>37</td>\n",
              "      <td>42</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>38</td>\n",
              "      <td>30</td>\n",
              "      <td>73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>39</td>\n",
              "      <td>36</td>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>40</td>\n",
              "      <td>20</td>\n",
              "      <td>75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>41</td>\n",
              "      <td>65</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>42</td>\n",
              "      <td>24</td>\n",
              "      <td>92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>43</td>\n",
              "      <td>48</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>44</td>\n",
              "      <td>31</td>\n",
              "      <td>61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>45</td>\n",
              "      <td>49</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>46</td>\n",
              "      <td>24</td>\n",
              "      <td>65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>47</td>\n",
              "      <td>50</td>\n",
              "      <td>55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>48</td>\n",
              "      <td>27</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>49</td>\n",
              "      <td>29</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>50</td>\n",
              "      <td>31</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    number  Age  Spending Score (1-100)\n",
              "0        1   19                      39\n",
              "1        2   21                      81\n",
              "2        3   20                       6\n",
              "3        4   23                      77\n",
              "4        5   31                      40\n",
              "5        6   22                      76\n",
              "6        7   35                       6\n",
              "7        8   23                      94\n",
              "8        9   64                       3\n",
              "9       10   30                      72\n",
              "10      11   67                      14\n",
              "11      12   35                      99\n",
              "12      13   58                      15\n",
              "13      14   24                      77\n",
              "14      15   37                      13\n",
              "15      16   22                      79\n",
              "16      17   35                      35\n",
              "17      18   20                      66\n",
              "18      19   52                      29\n",
              "19      20   35                      98\n",
              "20      21   35                      35\n",
              "21      22   25                      73\n",
              "22      23   46                       5\n",
              "23      24   31                      73\n",
              "24      25   54                      14\n",
              "25      26   29                      82\n",
              "26      27   45                      32\n",
              "27      28   35                      61\n",
              "28      29   40                      31\n",
              "29      30   23                      87\n",
              "30      31   60                       4\n",
              "31      32   21                      73\n",
              "32      33   53                       4\n",
              "33      34   18                      92\n",
              "34      35   49                      14\n",
              "35      36   21                      81\n",
              "36      37   42                      17\n",
              "37      38   30                      73\n",
              "38      39   36                      26\n",
              "39      40   20                      75\n",
              "40      41   65                      35\n",
              "41      42   24                      92\n",
              "42      43   48                      36\n",
              "43      44   31                      61\n",
              "44      45   49                      28\n",
              "45      46   24                      65\n",
              "46      47   50                      55\n",
              "47      48   27                      47\n",
              "48      49   29                      42\n",
              "49      50   31                      42"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "21yCfNmXB_vI",
        "outputId": "6f72f6ee-3166-49e1-9f3e-76a205026f3e"
      },
      "source": [
        "par.head()"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>gender</th>\n",
              "      <th>RPDE</th>\n",
              "      <th>numPulses</th>\n",
              "      <th>meanPeriodPulses</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.57227</td>\n",
              "      <td>240</td>\n",
              "      <td>0.008064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.53966</td>\n",
              "      <td>234</td>\n",
              "      <td>0.008258</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.58982</td>\n",
              "      <td>232</td>\n",
              "      <td>0.008340</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.59257</td>\n",
              "      <td>178</td>\n",
              "      <td>0.010858</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.53028</td>\n",
              "      <td>236</td>\n",
              "      <td>0.008162</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   id  gender     RPDE  numPulses  meanPeriodPulses\n",
              "0   0       1  0.57227        240          0.008064\n",
              "1   0       1  0.53966        234          0.008258\n",
              "2   0       1  0.58982        232          0.008340\n",
              "3   1       0  0.59257        178          0.010858\n",
              "4   1       0  0.53028        236          0.008162"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KPSlObdNA1qp"
      },
      "source": [
        "***SPLITING*** **THE** ***DATA***"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "boaA1hnKMVxR"
      },
      "source": [
        "\n",
        "x = par.iloc[:, :-1].values\n",
        "y = par.iloc[:, :4].values\n",
        "z=pd.DataFrame(x)\n",
        "w=pd.DataFrame(y)\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "labelencoder_x=LabelEncoder()\n",
        "labelencoder_y=LabelEncoder()\n",
        "\n",
        "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)\n",
        "z_train=pd.DataFrame(x_train)\n",
        "z_test=pd.DataFrame(x_test)\n",
        "w_train=pd.DataFrame(y_train)\n",
        "w_test=pd.DataFrame(y_test)"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fkxn7BmFSrXZ"
      },
      "source": [
        "**DATA** **CLEANING**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "RsM1v__uSt--",
        "outputId": "ca2ff197-b12e-42ef-e3e6-93d4f6bd3f9b"
      },
      "source": [
        "par.head()"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>gender</th>\n",
              "      <th>RPDE</th>\n",
              "      <th>numPulses</th>\n",
              "      <th>meanPeriodPulses</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.57227</td>\n",
              "      <td>240</td>\n",
              "      <td>0.008064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.53966</td>\n",
              "      <td>234</td>\n",
              "      <td>0.008258</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.58982</td>\n",
              "      <td>232</td>\n",
              "      <td>0.008340</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.59257</td>\n",
              "      <td>178</td>\n",
              "      <td>0.010858</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.53028</td>\n",
              "      <td>236</td>\n",
              "      <td>0.008162</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   id  gender     RPDE  numPulses  meanPeriodPulses\n",
              "0   0       1  0.57227        240          0.008064\n",
              "1   0       1  0.53966        234          0.008258\n",
              "2   0       1  0.58982        232          0.008340\n",
              "3   1       0  0.59257        178          0.010858\n",
              "4   1       0  0.53028        236          0.008162"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "AqDYuFb3S--I",
        "outputId": "672f3854-4868-47f5-bf2b-ecf3f47694b3"
      },
      "source": [
        "par.tail()"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>gender</th>\n",
              "      <th>RPDE</th>\n",
              "      <th>numPulses</th>\n",
              "      <th>meanPeriodPulses</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>194</th>\n",
              "      <td>64</td>\n",
              "      <td>1</td>\n",
              "      <td>0.56929</td>\n",
              "      <td>262</td>\n",
              "      <td>0.007351</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>65</td>\n",
              "      <td>1</td>\n",
              "      <td>0.32571</td>\n",
              "      <td>299</td>\n",
              "      <td>0.006454</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>65</td>\n",
              "      <td>1</td>\n",
              "      <td>0.33804</td>\n",
              "      <td>301</td>\n",
              "      <td>0.006422</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>65</td>\n",
              "      <td>1</td>\n",
              "      <td>0.29659</td>\n",
              "      <td>300</td>\n",
              "      <td>0.006450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>198</th>\n",
              "      <td>66</td>\n",
              "      <td>0</td>\n",
              "      <td>0.44355</td>\n",
              "      <td>351</td>\n",
              "      <td>0.005503</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     id  gender     RPDE  numPulses  meanPeriodPulses\n",
              "194  64       1  0.56929        262          0.007351\n",
              "195  65       1  0.32571        299          0.006454\n",
              "196  65       1  0.33804        301          0.006422\n",
              "197  65       1  0.29659        300          0.006450\n",
              "198  66       0  0.44355        351          0.005503"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "bz8WWd5vTDkN",
        "outputId": "9633ba83-4442-49d7-e10b-16c71d2a2bd8"
      },
      "source": [
        "par.isna()"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>gender</th>\n",
              "      <th>RPDE</th>\n",
              "      <th>numPulses</th>\n",
              "      <th>meanPeriodPulses</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>194</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>198</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>199 rows × 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "        id  gender   RPDE  numPulses  meanPeriodPulses\n",
              "0    False   False  False      False             False\n",
              "1    False   False  False      False             False\n",
              "2    False   False  False      False             False\n",
              "3    False   False  False      False             False\n",
              "4    False   False  False      False             False\n",
              "..     ...     ...    ...        ...               ...\n",
              "194  False   False  False      False             False\n",
              "195  False   False  False      False             False\n",
              "196  False   False  False      False             False\n",
              "197  False   False  False      False             False\n",
              "198  False   False  False      False             False\n",
              "\n",
              "[199 rows x 5 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bhPU-FO3Tbyf",
        "outputId": "c823b694-6f63-444e-d9fb-643aff613b24"
      },
      "source": [
        "par.isna().any()"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                  False\n",
              "gender              False\n",
              "RPDE                False\n",
              "numPulses           False\n",
              "meanPeriodPulses    False\n",
              "dtype: bool"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l2LTU-JSTh8F",
        "outputId": "01972892-2a6b-4b12-d82c-80e500c6d000"
      },
      "source": [
        "par.isna().sum()"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                  0\n",
              "gender              0\n",
              "RPDE                0\n",
              "numPulses           0\n",
              "meanPeriodPulses    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WpoYslNATswC",
        "outputId": "9a9f5229-496c-4b05-cb70-580c49158ac8"
      },
      "source": [
        "par.isna().any().sum()"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZjbcN5fFT5XV",
        "outputId": "9a8758fb-25d0-42fb-ff7c-459c96f62afd"
      },
      "source": [
        "par.duplicated()"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      False\n",
              "1      False\n",
              "2      False\n",
              "3      False\n",
              "4      False\n",
              "       ...  \n",
              "194    False\n",
              "195    False\n",
              "196    False\n",
              "197    False\n",
              "198    False\n",
              "Length: 199, dtype: bool"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YNNq8ohLXBl3"
      },
      "source": [
        "**MACHINE** **LEARNING** **MODELS**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6UzO916Ctcnk"
      },
      "source": [
        "1)*DECISION* *TREE* *CLASSIFIER*"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MzJEcBeMlEI8"
      },
      "source": [
        "%matplotlib inline\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import classification_report, confusion_matrix \n",
        "from sklearn.tree import plot_tree"
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QNrO2JXl4za9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "outputId": "4c483a72-f3a1-4d82-de19-1ff50a11a92f"
      },
      "source": [
        "par = sns.load_dataset('iris')\n",
        "par.head()"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal_length</th>\n",
              "      <th>sepal_width</th>\n",
              "      <th>petal_length</th>\n",
              "      <th>petal_width</th>\n",
              "      <th>species</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   sepal_length  sepal_width  petal_length  petal_width species\n",
              "0           5.1          3.5           1.4          0.2  setosa\n",
              "1           4.9          3.0           1.4          0.2  setosa\n",
              "2           4.7          3.2           1.3          0.2  setosa\n",
              "3           4.6          3.1           1.5          0.2  setosa\n",
              "4           5.0          3.6           1.4          0.2  setosa"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jR_GZrUCldu-",
        "outputId": "55f17521-1fae-49dd-e47c-7834035c9e2b"
      },
      "source": [
        "par.shape"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(150, 5)"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p8y3-u3Zlnew",
        "outputId": "1fbb6eb3-1394-4b72-8349-4d99c25e2ec4"
      },
      "source": [
        "par.isnull().any()"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "sepal_length    False\n",
              "sepal_width     False\n",
              "petal_length    False\n",
              "petal_width     False\n",
              "species         False\n",
              "dtype: bool"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uQcC2qTmmu14",
        "outputId": "5245034c-59bf-4473-fc1e-5c70a09d81fb"
      },
      "source": [
        "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)\n",
        "print('Training split input-',x_train.shape)\n",
        "print('Testing split input-',x_test.shape)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training split input- (159, 4)\n",
            "Testing split input- (40, 4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bAlRmTFenxBT",
        "outputId": "b5298550-f738-4829-9d40-32e77d5706ca"
      },
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "dtree=DecisionTreeClassifier()\n",
        "print('Decision Tree Classifier Created')"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Decision Tree Classifier Created\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tt-08SR2eAHI"
      },
      "source": [
        "*FITTING*,*PREDICTION* *AND* *ACCURACY*"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kw4453Khosdo",
        "outputId": "fa448e65-5c65-4e12-c868-46578f36ce5f"
      },
      "source": [
        "y_pred = dtree.predict(x_test)\n",
        "print(\"Classification report - \\n\", classification_report(y_test,y_pred))\n"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification report - \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.74      0.70      0.72        20\n",
            "           1       0.71      0.75      0.73        20\n",
            "\n",
            "    accuracy                           0.73        40\n",
            "   macro avg       0.73      0.72      0.72        40\n",
            "weighted avg       0.73      0.72      0.72        40\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "UBKyRNuFo0cW",
        "outputId": "af4c4e2b-e8ca-457b-b1a9-33d394b2b1fd"
      },
      "source": [
        "import seaborn as sns\n",
        "dtree.fit(x_train,y_train)\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "plt.figure(figsize=(5,5))\n",
        "sns.heatmap(data=cm,linewidths=.5, annot=True,square = True,  cmap = 'Blues')\n",
        "plt.ylabel('Actual label')\n",
        "plt.xlabel('Predicted label')\n",
        "all_sample_title = 'Accuracy Score: {0}'.format(dtree.score(x_test, y_test))\n",
        "plt.title(all_sample_title, size = 15)"
      ],
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Accuracy Score: 0.725')"
            ]
          },
          "metadata": {},
          "execution_count": 63
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x360 with 2 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "moq9lOX7rFox",
        "outputId": "3f5241dc-0a15-4e85-ebbf-4d850377dac4"
      },
      "source": [
        "dec_tree = plot_tree(decision_tree=dtree,filled=True,precision=4,rounded=True)"
      ],
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PPmZWrkdy2C2"
      },
      "source": [
        "2)**K**-**MAPS**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TLs-mlKpxEL5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f1b967dc-6ba2-468f-a67e-8cb08855d4eb"
      },
      "source": [
        "import statsmodels.api as sm\n",
        "sns.set()\n",
        "from sklearn.cluster import KMeans"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "Ev_ojtaZxNo2",
        "outputId": "52265795-0709-410c-be1b-afb821733e12"
      },
      "source": [
        "par= pd.read_csv('par.csv')\n",
        "par"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>gender</th>\n",
              "      <th>RPDE</th>\n",
              "      <th>numPulses</th>\n",
              "      <th>numPeriodsPulses</th>\n",
              "      <th>meanPeriodPulses</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.57227</td>\n",
              "      <td>240</td>\n",
              "      <td>239</td>\n",
              "      <td>0.008064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.53966</td>\n",
              "      <td>234</td>\n",
              "      <td>233</td>\n",
              "      <td>0.008258</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.58982</td>\n",
              "      <td>232</td>\n",
              "      <td>231</td>\n",
              "      <td>0.008340</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.59257</td>\n",
              "      <td>178</td>\n",
              "      <td>177</td>\n",
              "      <td>0.010858</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.53028</td>\n",
              "      <td>236</td>\n",
              "      <td>235</td>\n",
              "      <td>0.008162</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>194</th>\n",
              "      <td>64</td>\n",
              "      <td>1</td>\n",
              "      <td>0.56929</td>\n",
              "      <td>262</td>\n",
              "      <td>261</td>\n",
              "      <td>0.007351</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>65</td>\n",
              "      <td>1</td>\n",
              "      <td>0.32571</td>\n",
              "      <td>299</td>\n",
              "      <td>298</td>\n",
              "      <td>0.006454</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>65</td>\n",
              "      <td>1</td>\n",
              "      <td>0.33804</td>\n",
              "      <td>301</td>\n",
              "      <td>300</td>\n",
              "      <td>0.006422</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>65</td>\n",
              "      <td>1</td>\n",
              "      <td>0.29659</td>\n",
              "      <td>300</td>\n",
              "      <td>299</td>\n",
              "      <td>0.006450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>198</th>\n",
              "      <td>66</td>\n",
              "      <td>0</td>\n",
              "      <td>0.44355</td>\n",
              "      <td>351</td>\n",
              "      <td>350</td>\n",
              "      <td>0.005503</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>199 rows × 6 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     id  gender     RPDE  numPulses  numPeriodsPulses  meanPeriodPulses\n",
              "0     0       1  0.57227        240               239          0.008064\n",
              "1     0       1  0.53966        234               233          0.008258\n",
              "2     0       1  0.58982        232               231          0.008340\n",
              "3     1       0  0.59257        178               177          0.010858\n",
              "4     1       0  0.53028        236               235          0.008162\n",
              "..   ..     ...      ...        ...               ...               ...\n",
              "194  64       1  0.56929        262               261          0.007351\n",
              "195  65       1  0.32571        299               298          0.006454\n",
              "196  65       1  0.33804        301               300          0.006422\n",
              "197  65       1  0.29659        300               299          0.006450\n",
              "198  66       0  0.44355        351               350          0.005503\n",
              "\n",
              "[199 rows x 6 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "Tj2lk74bxaNy",
        "outputId": "e63d32d9-7476-4b92-b00a-0af6eda9189e"
      },
      "source": [
        "plt.scatter(par['id'],par['numPulses'])\n",
        "plt.xlim(-10,100)\n",
        "plt.ylim(-100,700)\n",
        "plt.show()"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WYKxSXa6NKxL"
      },
      "source": [
        "x = np.array(par.drop(['id'], 1).astype(float))"
      ],
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OXFesuIjNUnm"
      },
      "source": [
        "y = np.array(par['id'])"
      ],
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HKrXq2IXN0Ih",
        "outputId": "51c39a05-4245-460d-f665-fe7ac42898bd"
      },
      "source": [
        "par.info()"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 199 entries, 0 to 198\n",
            "Data columns (total 6 columns):\n",
            " #   Column            Non-Null Count  Dtype  \n",
            "---  ------            --------------  -----  \n",
            " 0   id                199 non-null    int64  \n",
            " 1   gender            199 non-null    int64  \n",
            " 2   RPDE              199 non-null    float64\n",
            " 3   numPulses         199 non-null    int64  \n",
            " 4   numPeriodsPulses  199 non-null    int64  \n",
            " 5   meanPeriodPulses  199 non-null    float64\n",
            "dtypes: float64(2), int64(4)\n",
            "memory usage: 9.5 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 315
        },
        "id": "RkuX1DBZN2OO",
        "outputId": "b4bebad9-829a-4791-c2c0-5cd5d3beefe5"
      },
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "par_scaled = scaler.fit_transform(par)\n",
        "pd.DataFrame(par_scaled).describe()"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1.990000e+02</td>\n",
              "      <td>1.990000e+02</td>\n",
              "      <td>1.990000e+02</td>\n",
              "      <td>1.990000e+02</td>\n",
              "      <td>1.990000e+02</td>\n",
              "      <td>1.990000e+02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>-1.004222e-17</td>\n",
              "      <td>1.863389e-16</td>\n",
              "      <td>4.463208e-17</td>\n",
              "      <td>1.743441e-16</td>\n",
              "      <td>-1.263646e-16</td>\n",
              "      <td>6.890078e-16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.002522e+00</td>\n",
              "      <td>1.002522e+00</td>\n",
              "      <td>1.002522e+00</td>\n",
              "      <td>1.002522e+00</td>\n",
              "      <td>1.002522e+00</td>\n",
              "      <td>1.002522e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-1.705961e+00</td>\n",
              "      <td>-1.194500e+00</td>\n",
              "      <td>-2.360945e+00</td>\n",
              "      <td>-1.721502e+00</td>\n",
              "      <td>-1.715797e+00</td>\n",
              "      <td>-2.007889e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>-8.704314e-01</td>\n",
              "      <td>-1.194500e+00</td>\n",
              "      <td>-7.798465e-01</td>\n",
              "      <td>-6.721430e-01</td>\n",
              "      <td>-6.687016e-01</td>\n",
              "      <td>-6.373946e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>1.731941e-02</td>\n",
              "      <td>8.371707e-01</td>\n",
              "      <td>1.196003e-01</td>\n",
              "      <td>-1.332828e-01</td>\n",
              "      <td>-1.310042e-01</td>\n",
              "      <td>-1.118554e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8.528495e-01</td>\n",
              "      <td>8.371707e-01</td>\n",
              "      <td>7.166378e-01</td>\n",
              "      <td>4.282664e-01</td>\n",
              "      <td>4.293331e-01</td>\n",
              "      <td>6.151510e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.740600e+00</td>\n",
              "      <td>8.371707e-01</td>\n",
              "      <td>2.161323e+00</td>\n",
              "      <td>3.224668e+00</td>\n",
              "      <td>3.219700e+00</td>\n",
              "      <td>3.174501e+00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                  0             1  ...             4             5\n",
              "count  1.990000e+02  1.990000e+02  ...  1.990000e+02  1.990000e+02\n",
              "mean  -1.004222e-17  1.863389e-16  ... -1.263646e-16  6.890078e-16\n",
              "std    1.002522e+00  1.002522e+00  ...  1.002522e+00  1.002522e+00\n",
              "min   -1.705961e+00 -1.194500e+00  ... -1.715797e+00 -2.007889e+00\n",
              "25%   -8.704314e-01 -1.194500e+00  ... -6.687016e-01 -6.373946e-01\n",
              "50%    1.731941e-02  8.371707e-01  ... -1.310042e-01 -1.118554e-01\n",
              "75%    8.528495e-01  8.371707e-01  ...  4.293331e-01  6.151510e-01\n",
              "max    1.740600e+00  8.371707e-01  ...  3.219700e+00  3.174501e+00\n",
              "\n",
              "[8 rows x 6 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h-V9kqwiOA8R",
        "outputId": "1bf143ed-ea4c-47e1-ed03-0daa7deabe24"
      },
      "source": [
        "kmeans = KMeans(n_clusters=2)\n",
        "kmeans.fit(x)"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,\n",
              "       n_clusters=2, n_init=10, n_jobs=None, precompute_distances='auto',\n",
              "       random_state=None, tol=0.0001, verbose=0)"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1H-KI-RUOJW5",
        "outputId": "98ed2da2-0fb9-4059-9ac1-08fecbcc952f"
      },
      "source": [
        "correct = 0\n",
        "for i in range(len(x)):\n",
        "    predict_me = np.array(x[i].astype(float))\n",
        "    predict_me = predict_me.reshape(-1, len(predict_me))\n",
        "    prediction = kmeans.predict(predict_me)\n",
        "    if prediction[0] == y[i]:\n",
        "        correct += 1\n",
        "\n",
        "print(correct/len(x))"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.01507537688442211\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tueomfpJuy_e"
      },
      "source": [
        "*FITTING*,*PREDICTING* *AND* *ACCURACY*"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ehXIvIN6ORz_",
        "outputId": "2b78abfc-f4cc-4c2f-fe12-281e1c73b144"
      },
      "source": [
        "kmeans = KMeans(n_clusters=2, init='k-means++')\n",
        "kmeans.fit(par_scaled)"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,\n",
              "       n_clusters=2, n_init=10, n_jobs=None, precompute_distances='auto',\n",
              "       random_state=None, tol=0.0001, verbose=0)"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IsjAKAoJOa6T",
        "outputId": "d126660a-7684-4a9a-946b-df1e68b946f5"
      },
      "source": [
        "kmeans = KMeans(n_jobs= -1, n_clusters = 5, init='k-means++')\n",
        "kmeans.fit(par_scaled)\n",
        "pred = kmeans.predict(par_scaled)\n",
        "print(pred)"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0 0 0 0 0 0 2 2 2 3 3 3 3 1 1 2 2 2 2 2 2 0 0 0 2 2 2 2 2 2 0 0 0 2 2 2 2\n",
            " 2 2 2 0 2 3 3 3 0 0 0 3 1 1 3 3 1 1 1 1 2 2 2 1 1 1 2 2 0 3 3 3 0 0 0 0 0\n",
            " 1 1 1 1 2 2 2 3 3 3 3 3 3 3 3 3 1 1 3 0 0 0 0 0 0 0 0 0 1 3 3 3 3 3 4 4 4\n",
            " 1 1 1 4 4 4 0 0 0 0 0 0 3 3 3 0 0 4 4 4 4 4 4 4 1 1 1 0 0 0 4 4 4 3 3 3 3\n",
            " 3 3 1 1 1 4 4 4 4 4 4 1 0 0 4 4 4 4 4 4 0 0 0 1 1 1 4 4 4 1 3 3 1 1 1 4 4\n",
            " 4 1 1 1 0 0 0 4 4 4 4 4 4 1]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "APTNal9zOrV_"
      },
      "source": [
        "kmeans= KMeans(n_clusters=120)\n",
        "kmeans.fit(x_train,y_train)\n",
        "y_pred= kmeans.predict(x_test)"
      ],
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fYiHg19KdOMg"
      },
      "source": [
        "3)**K**-**NEAREST** **NEIGHBOURS**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T3Yv80pqZGVN"
      },
      "source": [
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.neighbors import KNeighborsClassifier \n",
        "from sklearn import metrics"
      ],
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "w9vQ42UJZMLr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "408cd8ac-170f-4659-8322-f263318032f5"
      },
      "source": [
        "x,y=make_classification(n_samples=200 ,n_features=8,n_informative=8,n_redundant=0,n_repeated=0,n_classes=2,random_state=14)\n",
        "x_train, x_test, y_train, y_test= train_test_split(x, y, test_size= 0.2,random_state=32)\n",
        "sc= StandardScaler()\n",
        "sc.fit(x_train)\n",
        "x_train= sc.transform(x_train)\n",
        "sc.fit(x_test)\n",
        "x_test= sc.transform(x_test)\n",
        "x.shape"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(200, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v2h_NLevaYdK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "outputId": "459b1b64-cd01-4fe5-c98c-f0af63100bdb"
      },
      "source": [
        "error1= []\n",
        "error2= []\n",
        "for k in range(1,15):\n",
        "    knn= KNeighborsClassifier(n_neighbors=k)\n",
        "    knn.fit(x_train,y_train)\n",
        "    y_pred1= knn.predict(x_train)\n",
        "    error1.append(np.mean(y_train!= y_pred1))\n",
        "    y_pred2= knn.predict(x_test)\n",
        "    error2.append(np.mean(y_test!= y_pred2))\n",
        "plt.plot(range(1,15),error1,label=\"train\")\n",
        "plt.plot(range(1,15),error2,label=\"test\")\n",
        "plt.xlabel('k Value')\n",
        "plt.ylabel('Error')"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Error')"
            ]
          },
          "metadata": {},
          "execution_count": 59
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Zho7AGNTdXOq"
      },
      "source": [
        "*FITTING*,*PREDICTING* *AND* *ACCURACY*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q3ylNAvNFHT4"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IukzQiZWctoY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "224084bd-99f0-410d-c83b-c6b25ff50d9d"
      },
      "source": [
        "knn= KNeighborsClassifier(n_neighbors=6)\n",
        "knn.fit(x_train,y_train)\n",
        "y_pred= knn.predict(x_test)\n",
        "metrics.accuracy_score(y_test,y_pred)"
      ],
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.875"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JpS_V2qxFKxX"
      },
      "source": [
        "SUMMARY"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MjPVyz63FRDE"
      },
      "source": [
        " Parkinson's disease is a disorder of the central nervous system that affects movement, often including tremors.We do parkinson's project using python and machine learning.\n",
        " \n",
        " 1)EXPLORATORY DATA ANALYSIS Exploratory data analysis is the analysis of the data and brings out the insights. EDA is an approach to analyse the data with the help of various tools and graphical techniques like barplot, histogram etc.There are many libraries available in python like pandas, NumPy, matplotlib, seaborn etc. with the help of those we can do the analysis of the data.\n",
        "\n",
        "  2)DATA CLEANING Data cleaning is the process of fixing or removing incorrect, corrupted, incorrectly formatted, duplicate, or incomplete data within a dataset. When combining multiple data sources, there are many opportunities for data to be duplicated or mislabeled. If data is incorrect, outcomes and algorithms are unreliable, even though they may look correct. There is no one absolute way to prescribe the exact steps in the data cleaning process because the processes will vary from dataset to dataset.\n",
        "\n",
        "   3)SPLIT YOUR DATA WITH 80-20%% The most common split ratio is 80:20. That is 80% of the dataset goes into the training set and 20% of the dataset goes into the testing set. Before splitting the data, make sure that the dataset is large enough. Train/Test split works well with large datasets.The train-test split procedure is used to estimate the performance of machine learning algorithms when they are used to make predictions on data not used to train the model. It is a fast and easy procedure to perform, the results of which allow you to compare the performance of machine learning algorithms for your predictive modeling problem. \n",
        "\n",
        "  4)MACHINE LEARNING MODELS *Machine learning (ML) is a type of artificial intelligence (AI) that allows software applications to become more accurate at predicting outcomes without being explicitly programmed to do so. Machine learning algorithms use historical data as input to predict new output values. -.\n",
        "  \n",
        "  ->> DECISION TREE: A decision tree is a flowchart-like tree structure where an internal node represents feature(or attribute), the branch represents a decision rule, and each leaf node represents the outcome. The topmost node in a decision tree is known as the root node. It learns to partition on the basis of the attribute value. It partitions the tree in recursively manner call recursive partitioning. \n",
        "  \n",
        "  \n",
        "  \n",
        "  ->> K-MEANS: Kmeans Algorithm is an Iterative algorithm that divides a group of n datasets into k subgroups /clusters based on the similarity and their mean distance from the centroid of that particular subgroup/ formed. K, here is the pre-defined number of clusters to be formed by the Algorithm. If K=3, It means the number of clusters to be formed from the dataset is 3.\n",
        "  \n",
        "  \n",
        "  ->>  K-NEAREST NEIGHBOUR: K-Nearest Neighbors, or KNN for short, is one of the simplest machine learning algorithms and is used in a wide array of institutions. KNN is a non-parametric, lazy learning algorithm. When we say a technique is non-parametric, it means that it does not make any assumptions about the underlying data. In other words, it makes its selection based off of the proximity to other data points regardless of what feature the numerical values represent. Being a lazy learning algorithm implies that there is little to no training phase. "
      ]
    }
  ]
}